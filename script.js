// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
function switchLanguage(lang) {
  document.documentElement.lang = lang;

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
  document.querySelectorAll('.section-title').forEach(title => {
    if (title.dataset[lang]) title.textContent = title.dataset[lang];
  });

  // –ú–µ—Ç–∫–∏
  document.querySelectorAll('.check-label').forEach(label => {
    if (label.dataset[lang]) label.textContent = label.dataset[lang];
  });

  // –û–ø—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  document.querySelectorAll('select').forEach(select => {
    Array.from(select.options).forEach(option => {
      if (option.value === '') {
        option.textContent = '‚Äî';
      } else if (option.dataset[lang]) {
        option.textContent = option.dataset[lang];
      }
    });
  });
}

// === DOMContentLoaded ===
document.addEventListener('DOMContentLoaded', () => {
  const lang = document.documentElement.lang || 'ru';

  // –í—Å—Ç–∞–≤–∫–∞ –ø—É—Å—Ç–æ–π –æ–ø—Ü–∏–∏ –≤ –∫–∞–∂–¥—ã–π select.qty, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  document.querySelectorAll('select.qty').forEach(select => {
    const hasEmpty = Array.from(select.options).some(opt => opt.value === '');
    if (!hasEmpty) {
      const emptyOption = document.createElement('option');
      emptyOption.value = '';
      emptyOption.dataset.ru = '‚Äî';
      emptyOption.dataset.en = '‚Äî';
      emptyOption.textContent = '‚Äî';
      emptyOption.selected = true;
      select.insertBefore(emptyOption, select.firstChild);
    } else {
      select.value = '';
    }
  });

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –æ–ø—Ü–∏–π
  switchLanguage(lang);

  // === –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã ===
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const formattedDate = `${day}/${month}`;
  const dateDiv = document.getElementById('autodate');
  if (dateDiv) dateDiv.textContent = formattedDate;

  // === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–Ω–∞ 2 —è–∑—ã–∫–∞—Ö) ===
  const button = document.getElementById('sendToTelegram');
  button.addEventListener('click', () => {
    const buildMessage = (lang) => {
      let message = `üßæ <b>${lang === 'en' ? 'Checklist' : '–ß–µ–∫–ª–∏—Å—Ç'}</b>\n\n`;

      // –î–∞—Ç–∞
      message += `üìÖ ${lang === 'en' ? 'Date' : '–î–∞—Ç–∞'}: ${formattedDate}\n`;

      // –ò–º—è
      const nameSelect = document.querySelector('select[name="chef"]');
      const selectedChef = nameSelect?.options[nameSelect.selectedIndex];
      const name = selectedChef?.dataset[lang] || '‚Äî';
      message += `${lang === 'en' ? 'üë®‚Äçüç≥ Name' : 'üë®‚Äçüç≥ –ò–º—è'}: ${name}\n\n`;

      // –†–∞–∑–¥–µ–ª—ã
      document.querySelectorAll('.menu-section').forEach(section => {
        const sectionTitle = section.querySelector('.section-title');
        const title = sectionTitle?.dataset[lang] || '';
        message += `üî∏ <b>${title}</b>\n`;

        section.querySelectorAll('.dish').forEach(dish => {
          const select = dish.querySelector('select.qty');
          const label = dish.querySelector('label.check-label');
          const labelText = select.dataset[`label${lang.toUpperCase()}`] || label.dataset[lang] || '';
          const selectedOption = select.options[select.selectedIndex];
          const value = selectedOption?.dataset[lang] || '‚Äî';

          message += `‚Ä¢ ${labelText}: ${value}\n`;
        });

        const nextBlock = section.nextElementSibling;
        const commentField = nextBlock?.querySelector('textarea.comment');
        if (commentField && commentField.value.trim()) {
          message += `üí¨ ${lang === 'en' ? 'Comment' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}: ${commentField.value.trim()}\n`;
        }

        message += `\n`;
      });

      return message;
    };

    const token = '8348920386:AAFlufZWkWqsH4-qoqSSHdmgcEM_s46Ke8Q';
    const chat_id = '-1002393080811';
    const messageRU = buildMessage('ru');
    const messageEN = buildMessage('en');

    const sendMessage = (msg) => {
      return fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id,
          text: msg,
          parse_mode: 'HTML'
        })
      }).then(res => res.json());
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –æ—á–µ—Ä–µ–¥–∏
    sendMessage(messageRU)
      .then(data1 => {
        if (!data1.ok) throw new Error(data1.description);
        return sendMessage(messageEN);
      })
      .then(data2 => {
        if (!data2.ok) throw new Error(data2.description);
        alert('‚úÖ –ß–µ–∫–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        // localStorage.clear(); // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      })
      .catch(err => {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
        console.error(err);
      });
  });
});