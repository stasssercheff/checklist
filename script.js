// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
function switchLanguage(lang) {
  document.documentElement.lang = lang;

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
  document.querySelectorAll('.section-title').forEach(title => {
    if (title.dataset[lang]) title.textContent = title.dataset[lang];
  });

  // –ú–µ—Ç–∫–∏
  document.querySelectorAll('.check-label').forEach(label => {
    if (label.dataset[lang]) label.textContent = label.dataset[lang];
  });

  // –û–ø—Ü–∏–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
  document.querySelectorAll('select').forEach(select => {
    Array.from(select.options).forEach(option => {
      if (option.dataset[lang]) option.textContent = option.dataset[lang];
    });
  });

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—É—Å—Ç—ã—Ö –æ–ø—Ü–∏–π
  document.querySelectorAll('select.qty').forEach(select => {
    const emptyOption = select.querySelector('option[value=""]');
    if (emptyOption) {
      emptyOption.textContent = lang === 'en' ? '‚Äî Not selected ‚Äî' : '‚Äî –ù–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî';
    }
  });
}

// === DOMContentLoaded ===
document.addEventListener('DOMContentLoaded', () => {
  const lang = document.documentElement.lang || 'ru';

  // === –í—Å—Ç–∞–≤–∫–∞ –ø—É—Å—Ç—ã—Ö –æ–ø—Ü–∏–π ===
  document.querySelectorAll('select.qty').forEach(select => {
    const hasEmpty = Array.from(select.options).some(opt => opt.value === '');
    if (!hasEmpty) {
      const emptyOption = document.createElement('option');
      emptyOption.value = '';
      emptyOption.dataset.ru = '‚Äî –ù–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî';
      emptyOption.dataset.en = '‚Äî Not selected ‚Äî';
      emptyOption.textContent = lang === 'en' ? '‚Äî Not selected ‚Äî' : '‚Äî –ù–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî';
      select.insertBefore(emptyOption, select.firstChild);
    }
  });

  // === –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏ –æ–ø—Ü–∏–π ===
  switchLanguage(lang);

  // === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã ===
  const today = new Date();
  const day = String(today.getDate()).padStart(2, '0');
  const month = String(today.getMonth() + 1).padStart(2, '0');
  const formattedDate = `${day}/${month}`;
  const dateDiv = document.getElementById('autodate');
  if (dateDiv) dateDiv.textContent = formattedDate;

  // === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
  const button = document.getElementById('sendToTelegram');
  button.addEventListener('click', () => {
    const currentLang = document.documentElement.lang || 'ru';
    let message = `üßæ <b>–ß–µ–∫–ª–∏—Å—Ç</b>\n\n`;

    // –î–∞—Ç–∞
    const dateLine = currentLang === 'en'
      ? `üìÖ Date: ${formattedDate}`
      : `üìÖ –î–∞—Ç–∞: ${formattedDate}`;
    message += `${dateLine}\n`;

    // –ò–º—è
    const nameSelect = document.querySelector('select[name="chef"]');
    const selectedChef = nameSelect?.options[nameSelect.selectedIndex];
    const nameRU = selectedChef?.dataset.ru || '‚Äî –ù–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî';
    const nameEN = selectedChef?.dataset.en || '‚Äî Not selected ‚Äî';
    const nameLine = currentLang === 'en'
      ? `üë®‚Äçüç≥ Name: ${nameEN}`
      : `üë®‚Äçüç≥ –ò–º—è: ${nameRU}`;
    message += `${nameLine}\n\n`;

    // –†–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.menu-section').forEach(section => {
      const sectionTitle = section.querySelector('.section-title');
      const titleRU = sectionTitle?.dataset.ru || '';
      const titleEN = sectionTitle?.dataset.en || '';
      const sectionLine = currentLang === 'en'
        ? `üî∏ <b>${titleEN}</b>\n`
        : `üî∏ <b>${titleRU}</b>\n`;
      message += sectionLine;

      // –í—Å–µ –±–ª—é–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ
      const dishBlocks = section.querySelectorAll('.dish');
      dishBlocks.forEach(dish => {
        const select = dish.querySelector('select.qty');
        const label = dish.querySelector('label.check-label');

        if (select && label) {
          const labelRU = select.dataset.labelRu || label.dataset.ru || '';
          const labelEN = select.dataset.labelEn || label.dataset.en || '';
          const selectedOption = select.options[select.selectedIndex];

          const valueRU = selectedOption?.dataset.ru || '‚Äî –ù–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî';
          const valueEN = selectedOption?.dataset.en || '‚Äî Not selected ‚Äî';

          message += `‚Ä¢ ${labelRU} / ${labelEN}: ${valueRU} / ${valueEN}\n`;
        }
      });

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∞
      const nextBlock = section.nextElementSibling;
      const commentField = nextBlock?.querySelector('textarea.comment');
      if (commentField && commentField.value.trim()) {
        const commentText = commentField.value.trim();
        message += `üí¨ ${currentLang === 'en' ? 'Comment' : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}: ${commentText}\n`;
      }

      message += `\n`;
    });

    // === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
    const token = '8348920386:AAFlufZWkWqsH4-qoqSSHdmgcEM_s46Ke8Q';
    const chat_id = '-1002393080811';

    fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id,
        text: message,
        parse_mode: 'HTML'
      })
    })
    .then(res => res.json())
    .then(data => {
      if (data.ok) {
        alert('‚úÖ –ß–µ–∫–ª–∏—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        localStorage.clear(); // ‚Üê —Å–±—Ä–æ—Å –¢–û–õ–¨–ö–û –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram');
      }
    })
    .catch(err => {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram');
      console.error(err);
    });
  });
});